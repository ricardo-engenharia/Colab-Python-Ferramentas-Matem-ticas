# -*- coding: utf-8 -*-
"""Ferramentas Matemáticas Aplicadas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18kV_YMNj8dqytIO2BiREN_-zIr7d60Qr

# Aula 2
"""

c=566.0
m=614.3
n=6
taxa=((m-c)/n/c)*100
print('A taxa é %.2f%%' % taxa)
Valor = c*taxa/100
print('O valor é R$' , Valor)



"""# Aula 3"""

from sympy import * # importado a biblioteca sympy com y e o asterisco 
x,y=symbols("x y") # definir x e y symbolos entre parenteses e aspas
y=2*x # y e igual a 2x
print(y)# imprime y que é 2*x

import matplotlib.pyplot as plt
import matplotlib.patches as patches
fig=plt.figure()
fig1=fig.add_subplot(111, aspect='equal')
fig1.add_patch(patches.Rectangle((2, 0), 2, 7, color='green'))
fig1.add_patch(patches.Rectangle((4, 0), 2, 8, color='red'))
plt.xlim(0,10)
plt.ylim(0,10)



"""# Aula 4"""

from sympy import *
x,f = symbols("x f")
init_printing()
f=19*x**6-33*x**3+111*x+19
diff(f, x, 2)

from sympy import *
x,f = symbols("x f")
init_printing()
expand(6*x*(95*x**3-33))

from sympy import *
x,f = symbols("x f")
init_printing()
factor(570*x**4-198*x)

from sympy import *                    #maximo e mínimo aula 4 pagina 8
x, y = symbols("x y")
y=-4*x**2+4000*x-200000
df=diff(y, x,)                  # Derivada primeira
d2f=diff(y, x, 2)               # Derivada segunda
p=solve(Eq(df,0))               # ponto onde a derivada igual a zero
l=y.subs(x,p[0])                # substitui esse valor p achar LUCRO 
ds=d2f.subs(x,p[0])
print('Preço ótimo: ',p[0])
print('Lucro máximo:',l)
print('Derivada segunda:',ds)

from sympy import *
c, x = symbols("c x")
c=x**2-20*x+300
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x,p[0])
print('Produção ótima:',p[0])
print('Derivada segunda:',ds)

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,25,100)
c=x**2-20*x+300
plt.plot(x,c)
plt.show()

from sympy import *
x, L=symbols("x L")
L=-120*x**2+4800*x
df=diff(L, x)
d2f=diff(L, x, 2)
p=solve(Eq(df, 0))
ds=d2f.subs(x, p[0])
print('Preço ótimo:',p[0])
print('Derivada segunda:',ds)

from sympy import *
x,f=symbols("x f")
f=-0.04185*x**4+2.52027*x**3-54.81718*x**2+509.27586*x-1624.86959
df=diff(f, x)
d2f=diff(f, x, 2)
p=solve(Eq(df,0))
print(p)
print('Mínimo:',p[1])
print('Máximo:',p[2])

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(12,22,100)
f=-0.04185*x**4+2.52027*x**3-54.81718*x**2+509.27586*x-1624.86959
plt.plot(x,f)
plt.show()

from sympy import *
s,t=symbols("s t")
s=2*t**2+3*t
ds=diff(s,t)
v=ds.subs(t, 2)
print('Velocidade: %.2f m/s'%v)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
xx=np.linspace(-5,5,100)
yy=np.linspace(-5,5,100)
x,y=np.meshgrid(xx,yy)
f=x**2+y**2
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_surface(x,y,f)

from sympy import *
x,y,f = symbols("x y f")
f=x**2+y**2
fx=diff(f, x)
fy=diff(f, y)
fxx=diff(f, x, 2)
fyy=diff(f, y, 2)
fxy=diff(fx,y)
fyx=diff(fy,x)
px=solve(Eq(fx,0))
py=solve(Eq(fy,0))
fxxp=fxx.subs({x:px[0], y:py[0]})
fyyp=fyy.subs({x:px[0], y:py[0]})
fxyp=fxy.subs({x:px[0], y:py[0]})
fyxp=fyx.subs({x:px[0], y:py[0]})
D=fxxp*fyyp-fxyp*fyxp
print('Solução: (%.2f, %.2f)'% (px[0], py[0]))
print('Determinante:',D)
print('Derivada segunda em relação a x:',fxxp)

from sympy import *
x,y = symbols("x f")
init_printing()
f=18*x**4-14*x**2+22*x-1
diff(f, x)

from sympy import *
x,f = symbols("x f") 
f=-2*x**3-4*x**2+13*x-1
integrate(f,x)

from sympy import * #    errata da aula 4 integrais questao g
x, t = symbols("x t")
t = (3*x**2-4*x)/(2*x**3+6)
integrate(t, x)

from sympy import * #    errata da aula 4 integrais questao g
x, t = symbols("x t")
init_printing()
t = (3*x**2-4*x)/(2*x**3+6)
integrate(t, x)

from sympy import * # Aula Pratica 01 referente a aula 1 e 2
x,y = symbols("x y") 
init_printing()
expand((5*x+3*y+2*x*y)**3)

from sympy import * # Aula Pratica 01 referente a aula 1 e 2
x,y = symbols("x y") 
init_printing()
factor(2*x**2*y**3+6*x**5*y**4-15*x**2*y**4) # o resultado x ao quadrado y ao cubo (6x3y-15y+2)

from sympy import *
x,p = symbols("x p") 
p=-120*x**2+4800*x 
p.subs(x,22)

import numpy as np
coef=[-0.8, 0.8, 0]
np.roots(coef)

import numpy as np
coef=[-2, 400, -15000]
np.roots(coef) # assim achara o x1 e x2

import numpy as np
coef=[-0.5, 0.75, 0]
np.roots(coef)

from sympy import *  # ponto de equilibrio
x,r,c = symbols("x r c")
r=555.00*x
c=215.00*x+22500
xp=solve(Eq(r,c),x)
yp=r.subs(x,xp[0])
print(xp)
print(yp)

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,100,100)
a=0.99*x+19.90
b=0.79*x+29.90
plt.plot(x, a)
plt.plot(x, b) #laranja B custo inicial mais alto 
plt.show()

from sympy import * #Questao 10 referente a questao anterior para achar o ponto de equilibrio
x,a,b = symbols("x a b")
a=0.99*x+19.90
b=0.79*x+29.90
solve(Eq(a,b),x)

y.subs(x,7) # substitui o x por 7

from sympy import *
x,y = symbols("x y") 
y=-4*x**2+4000*x-200000 
y.subs(x,480)

from sympy import * # Questão 
x,y = symbols("x y") 
y=-7*x**2+5200*x-80000 
y.subs(x,350.00)

y=-7x2+5200x-80000

from sympy import *
x,y = symbols("x y") 
y=0.003*x**3-0.5*x**2-50*x+5000 
y.subs(x,1100)

from sympy import *
c,x,t = symbols("x y t")  # acrescentou a variavel c custo  t de tempo
c=x**2+2*x+300 
c.subs(x,20*t) # 20 vezes t

from sympy import *  # Caderno pagina 14
x,r,c = symbols("x r c")
r=419*x
c=271*x+15000.0
p=solve(Eq(r,c),x)
print(p)
r.subs(x,p[0])

from sympy import * # caderno pagina 14
x,r,c = symbols("r c x")
r=3500*x
c=1800*x+27200
p=solve(Eq(c,r),x)
print(p)
c.subs(x,p[0]) # o ponto de equilibrio e o par ordenado abaixo

from sympy import * # caderno pagina 16 Ponto de equilibrio Locadora A e B preço em quantos Km
f,g,x = symbols("f g x") 
f=2.99*x+59.90
g=2.16*x+98.00
p=solve(Eq(f,g),x) 
print(p)
f.subs(x,p[0]) # de 0 a 45,90 a locadora A e melhor e acima de 45,90 a Locadora B e melhor

import numpy as np # Pagina 17 exemplo 05 Quais são as raizes da função -x3-5x2+9x+11
coeff=[-1, -5, 9, 11]
np.roots(coeff)

import numpy as np # Pagina 17 exemplo 06 Industria de carne p(x)=-120x2+4800x
coeff=[-120, 4800, 0]
np.roots(coeff) # o lucro mensal é nulo quando o preço for 0 ou r$40,00

import numpy as np # Questao - Industria de carne p(x)=-80x2+7900x-5000
coeff=[-80, 7900, -5000]
np.roots(coeff) # o lucro mensal é nulo quando o preço for 0,64 ou r$98,11

p(x)=-80x2+7900x-5000

import matplotlib.pyplot as plt   # -------------------Aula 02 tema 05 Graficos
x=[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]
y=[25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25]
plt.plot(x, y)
plt.show()

import matplotlib.pyplot as plt   # -------------------Aula 02 tema 05 Graficos --Mais pratico
import numpy as np
x=np.linspace(-5,5,100)
y=x**2
plt.plot(x, y)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
x1=np.linspace(0,300,100)
y1=186*x1
y2=109*x1+11200
plt.plot(x1,y1)
plt.plot(x1,y2)
plt.show()

import matplotlib.pyplot as plt
x=["Março", "Abril", "Maio","Junho", "Julho"]
y=[35000, 29000, 27000, 32000, 33000]
plt.plot(x,y)
plt.show()

import matplotlib.pyplot as plt
x=["Março", "Abril", "Maio","Junho", "Julho"]
y=[35000, 29000, 27000, 32000, 33000]
plt.plot(x,y)
plt.plot(x,y,"r o")
plt.ylim(0, 40000)
plt.title("Produção de Março a Julho")
plt.xlabel("Mês")
plt.ylabel("Produção")
plt.show()

import matplotlib.pyplot as plt
x=["Março", "Abril", "Maio","Junho", "Julho"]
y=[35000, 29000, 27000, 32000, 33000]
plt.plot(x,y,"g", linewidth=9 )
plt.ylim(0, 40000)
plt.title("Produção de Março a Julho")
plt.xlabel("Mês")
plt.ylabel("Produção")
plt.show()

import matplotlib.pyplot as plt
x=["Segunda", "Terça", "Quarta","Quinta", "Sexta"]
y=[174, 197, 204, 233, 252]
plt.plot(x,y)
plt.ylim(0, 260)
plt.title("Demandas Diárias")
plt.xlabel("Dia")
plt.ylabel("Demanda")
plt.show()

import matplotlib.pyplot as plt
x=["Março", "Abril", "Maio","Junho", "Julho"]
y=[35000, 29000, 27000, 32000, 33000]
largura=0.5
plt.bar(x,y,largura)
plt.ylim(0, 40000)
plt.title("Produção de Março a Julho")
plt.xlabel("Mês")
plt.ylabel("Produção")
plt.show()

import matplotlib.pyplot as plt
x=["Março", "Abril", "Maio","Junho", "Julho"]
y=[35000, 29000, 27000, 32000, 33000]
largura=0.5
plt.barh(x,y,largura)
plt.title("Produção de Março a Julho")
plt.ylabel("Mês")
plt.xlabel("Produção")
plt.show()

import matplotlib.pyplot as plt
import numpy as np
mes=["Março", "Abril", "Maio","Junho", "Julho"]
x=np.arange(5)
y1=[35000, 29000, 27000, 32000, 33000]
y2=[34000, 33000, 25000, 37000, 27000]
largura=0.3
plt.bar(x,y1,largura,color="r")
plt.bar(x+largura,y2,largura,color="c")
plt.xticks(x,mes)
plt.title("Produção de Março a Julho")
plt.xlabel("Mês")
plt.ylabel("Produção")
plt.legend(["Prod1","Prod2"],loc=1) # onde ficara escrito a legendas prod 1  e 2 
plt.show()

import matplotlib.pyplot as plt
x=["Segunda", "Terça", "Quarta","Quinta", "Sexta"]
y=[174, 197, 204, 233, 252]
plt.bar(x,y)
plt.ylim(0, 260)
plt.title("Demandas Diárias")
plt.xlabel("Dia")
plt.ylabel("Demanda")
plt.show()

import matplotlib.pyplot as plt
x=[340, 560, 290]
cursos=["Computação","Elétrica","Produção"]
plt.axis("equal")
plt.pie(x,labels=cursos, autopct="%1.1f%%")
plt.title("Número de Estudantes por Curso")
plt.show()

import matplotlib.pyplot as plt
x=[340, 560, 290]
cursos=["Computação","Elétrica","Produção"]
cores=["r","m","y"]
plt.axis("equal")
plt.pie(x,labels=cursos, colors=cores, shadow=True, autopct="%1.1f%%")
plt.title("Número de Estudantes por Curso")
plt.show()

import matplotlib.pyplot as plt
x=[340, 560, 290]
cursos=["Computação","Elétrica","Produção"]
cores=["r","m","y"]
plt.axis("equal")
plt.pie(x,labels=cursos, colors=cores, shadow=True, explode=(0.1,0,0), autopct="%1.1f%%")
plt.title("Número de Estudantes por Curso")
plt.show()

import matplotlib.pyplot as plt
x=[450, 580, 270]
turnos=["1º Turno","2º Turno","3º Turno"]
cores=["r","b","y"]
plt.axis("equal")
plt.pie(x,labels=cursos, colors=cores, shadow=True, autopct="%1.1f%%")
plt.title("Número de funcionarios por Turno")
plt.show()



# Exemplo 1 Aula 1 - Tema 02
Temperatura = 32
print(Temperatura)

from sympy import *
r=2324.00
d=r*1/3
print(d)

from sympy import * 
x,y=symbols("x y")
init_printing()
expand((2*x+y)**3)

MateriaPrima=27936.10
Frete=1243.90
MateriaPrima+Frete

from sympy import *
x,r,c=symbols("x r c")
init_printing()
r=314*x
c=179*x+10530
solve(Eq(r,c),x)

from sympy import *
x = symbols("x")
init_printing()
factor(-x**3*y**6+3*x**3*y**4+x**2*y**5)

from sympy import *
x,y=symbols("x y")
init_printing()
expand((x**2*y**4)*(y+3*x-x*y**2))



"""# Aula 5

"""

import numpy as np    # numpy trabalha com radianos
arco=np.deg2rad(234)   # calcular 234 graus em radianos
np.sin(arco)            # achar o seno de 57 graus

import numpy as np
arco=np.deg2rad(234)
np.sin(arco)

import numpy as np
angulo=np.arccos(0.7)    #calcula o arco coseno desse angulo .7
np.rad2deg(angulo)          # transformar radianos para graus

import numpy as np
angulo=np.arccos(-0.6544)    #calcula o arco coseno desse angulo .7
np.rad2deg(angulo)          # transformar radianos para graus

"""# Aula 6

"""



import sys
! {sys.executable} -m pip install

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
xx=np.linspace(-5,5,100)
yy=np.linspace(-5,5,100)
x,y=np.meshgrid(xx,yy)
f=(x**3-7*x**2)
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_surface(x,y,f)



from sympy import *
x,f = symbols("x f")
f=(x**3-7*x**2)
fx=diff(f, x)
fxx=diff(f, x, 2)
px=solve(Eq(fx,0))
fx=fx.subs({x:px[0]})
print('Solução: (%.2f, %.2f)' % (px[0]))
print('Derivada segunda em relação a x: ',fxxp)

from sympy import *
x,f = symbols("x f")
f=x**3-7*x**2
df=diff(f, x)
d2f=diff(f, x, 2)
p=solve(Eq(df,0))
print(p)
print('Mínimo: ',p[1])
print('Máximo: ',p[2])

from sympy import *
x,C=symbols("x C")
C=0.04*x**3-4*x**2+101*x+5000
C.subs(x,15)

from sympy import *
x,f=symbols("x f")
init_printing()
f=x**3-7*x**2
diff(f, x)

import matplotlib.pyplot as plt    #pagina 23  aula 4 apol 2 questao 1
from sympy import *                #pagina 23  aula 4
import numpy as np                  #pagina 23  aula 4
x,f=symbols("x f")
f=-4*x**2+40*x-7 
coeff=[-4, 40, -7]
r=np.roots(coeff)
A=integrate(f, (x, min(r), max(r)))
x=np.linspace(min(r)-0.5,max(r)+0.5,1000)
f=-4*x**2+40*x-7 
plt.plot(x,f,color='blue')
plt.axhline(color='blue')
plt.fill_between(x, f, where=[(x>min(r)) and (x<max(r)) for x in x],color='yellow')
print('Área:', A)

from sympy import *         # Questao 2 apol 2  AULA 4 Tema 1 derivadas
x,f=symbols("x f")
f=19*x**6-33*x**3+111*x+19
diff(f, x, 2)

from sympy import *
x,y = symbols("x y")
expand(6*x*(95*x**3-33))

from sympy import *
x,f=symbols("x f")
f=5*x**2+3*x+1
integrate(f, (x, 0, 4))

404/3

from scipy.interpolate import *
x=[2,7]
y=[5,10]
f=lagrange(x,y)
print(f)

from scipy.interpolate import *
x=[0,3,10]
y=[2,7,-2]
f=lagrange(x,y)
print(f)

from scipy.interpolate import *
x=[1,2,3,4,5]
y=[180,120,150,190,210]
f=lagrange(x,y)
print(f)

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(180,120,150,190,210)
y=x**2
plt.plot(x, y)
plt.show()

from sympy import *
x,c = symbols("x c")
c=x**2-20*x+300
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x, p[0])
print('Produção ótima: ',p[0])
print('Derivada segunda: ',ds)

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,25,100)
c=x**2-20*x+300
plt.plot(x, c)
plt.show()

import numpy as np
from scipy import stats
x=np.array([1,2,3,4,5])
y=np.array([180,120,150,190,210])
a,b,correlacão,p,erro=stats.linregress(x,y)
print('A equação é: y=%.2fx+%.2f'% (a,b))

import numpy as np
from scipy import stats
x=np.array([3,6])
y=np.array([2,3])
a,b,correlacão,p,erro=stats.linregress(x,y)
print('A equação é: y=%.2fx+%.2f'% (a,b))

from pulp import *
prob = LpProblem(Exemplo1,LpMaximize)
prob +-  L(x)=1340x-0,08x2

"""# Questoes"""



from sympy import *
x,y = symbols("x y")
y=1340*x-0,08*x**2
df=diff(y, x)
p=solve(Eq(df,0))
l=y.subs(x, p[0])
ds=d2f.subs(x, p[0])
print('Preço ótimo: ',p[0])
print('Lucro máximo: ',l)

import numpy as np   # parabola  equação polinomio
coef=[-0.008, 0.8, 0]
np.roots(coef)

from sympy import *
x,L = symbols("x L")
L=-0.008*x**2+0.8*x
df=diff(L, x)
p=solve(Eq(df,0))
ds=d2f.subs(x, p[0])
print('Preço ótimo: ',p[0])

from sympy import *
x,y = symbols("x y")
y=-0.008*x**2+0.8*x
df=diff(y, x)
d2f=diff(y, x, 2)
p=solve(Eq(df,0))
l=y.subs(x, p[0])
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x, p[0])
print('Produção ótima: ',p[0])

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
x=np.array([3,6 ,7])

import numpy as np
A=np.array([[4,-3,1],[1,1,3],[2,3,-4]])
b=np.array([[15],[27],[31]])
X=np.linalg.solve(A,b)
print(X)

"""# Objetiva

"""

import numpy as np # qual e a reta que melhor se ajusta a esses pontos TABELA - mes 1 2 3 4 5 Venda 180 120 150 190 210
from scipy import stats
x=np.array([1, 2, 3, 4, 5]) #mes x
y=np.array([180, 120, 150, 190, 210]) #vendas y
a,b,correlacao,p,erro=stats.linregress(x,y) #dados da reta de regressao
print('A equação é: y=%.2fx+%.2f'% (a,b)) #apresenta a equac. da reta
previsao=a*6+b #demanda prevista para o sabado
print('Demanda prevista para o sabado: R$ %.2f'% previsao)

from scipy.interpolate import * # Obtenha o polinomio que interpola os pontos (0,2),(3,7),(10,-2)
x=[0, 3, 10] #  valores de x
y=[2, 7, -2] # valores de y
f=lagrange(x,y) #obtenção da função de interpolação
print(f)

import sys  #Problema de programação linear:    max z=4x1+3x2+x3  x1+10x2+4x3<=200  4x1+x2<=120  2x2+3x3<=100
!{sys.executable} -m pip install pulp
from pulp import *
prob=LpProblem('Exemplo1',LpMaximize)
x1=LpVariable("caixa de som",0)
x2=LpVariable("pendrive",0)
x3=LpVariable("garrafa",0)
prob += 4*x1 + 3*x2 + x3 
prob += x1 + 10*x2 + 4*x3 <=200
prob += 4*x1 + x2 <=120
prob += 2*x2 + 3*x3 <=100
prob.solve() 
for v in prob.variables():
  print(v.name,"=", v.varValue)
print("Lucro Máximo =", value(prob.objective))

import numpy as np  # Questão 2/10 letra d -Dados os vetores u = 7 1 -9 v= 3 -5 -4 calcule u x v - produto vetorial cross
v=np.array([[7, 1, -9]])
u=np.array([[3, -5, -4]])
w=np.cross(u,v)*(-1)
print(w)

import numpy as np      # Questao 10/10 Sistema Linear objetiva Letra B
A=np.array([[4,-3,1],[1,1,3],[2,3,-4]])
b=np.array([[15],[27],[31]])
X=np.linalg.solve(A,b)
print(X)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D # Classifique e obtenha os pontos criticos f(x,y)=x2+y2
import numpy as np
xx=np.linspace(-5,5,100)
yy=np.linspace(-5,5,100)
x,y=np.meshgrid(xx,yy)
f=x**2+y**2
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_surface(x,y,f)

from sympy import *   # Questão -  obtenha os pontos criticos f(x)=x3-7x2
x,y = symbols("x f")
f=x**3-7*x**2
fx=diff(f, x)
px=solve(Eq(fx,0))
print(px[0])
print('Determinante: ',px)
print('Derivada segunda em relação a x: ',fx)

from sympy import *   # Questão -  obtenha os pontos criticos f(x)=10x5+23x3-7x
x,y = symbols("x f")
f=10*x**5+23*x**3-7*x
fx=diff(f, x)
px=solve(Eq(fx,0))
print(px[0])
print('Determinante: ',px)
print('Derivada segunda em relação a x: ',fx)

from sympy import *       # Questão 9/10 Integral indefinida letra A
x,q=symbols("x q")
init_printing()
q=6*x**5+cos(x)
integrate(q, x)

import numpy as np     # 8/10 angulo cujo cosseno e igual a - 0,6544
arco=np.arccos(- .6544)
np.rad2deg(arco)

“from sympy import diff” # Calcular a integral de uma função usa diff da bibliot. sympy

from sympy import *     # Questao 6/10 Derivada primeira da função 10x5+23x3-7x
x,t=symbols("x t")
t=10*x**5+23*x**3-7*x
diff(t, x)

import numpy as np      # Questão 4/10 Reta de Regressao Letra B
import matplotlib.pyplot as plt
from scipy import stats
x=np.array([1, 3, 5, 9])
y=np.array([5, 4, 9, 11])
a,b,correlacao,p,erro=stats.linregress(x,y)
print('Reta de regressao: y=%.2fx+%.2f'% (a,b))
plt.plot(x, y, )

from sympy import *   # Questão 3/10 Calcule a Integral da função no intervalo de [0,3]
x,f=symbols("x f")
f=x**3+cos(x)
integrate(f, (x, 0, 3))

import numpy as np  # Questão 2/10 letra d -Dados os vetores u = 7 -22 13 v= -1 11 23 calcule u x v - produto vetorial cross
v=np.array([[7, -22, 13]])
u=np.array([[-1, 11, 23]])
w=np.cross(u,v)
print(w)

# questao 1/10 calcular a integral é integrate que e função da bibl sympy Letra B



from sympy import * # Aqui integrate da biblioteca sympy
x,f=symbols("x f")
f=x**3+cos(x)
integrate(f, x)

import numpy as np  # Sistema linear com numeros complexos: (6+2j 4+j)(a) = 11+3j (b) linha dois (2-j 2+2j)(a)= 7+4j (b)
A=np.array([[complex(6,2), complex(4,1)],[complex(2,-1), complex(2,2)]])
b=np.array([[complex(11,3)],[complex(7,4)]])
X=np.linalg.solve(A,b)
print(X)

import numpy as np    # Questao 2/10 numeros complexos com graus 30<23 e 52<37
A=np.array([[complex(1,5), complex(3,-2)],[complex(3,-2), complex(4,1)]])
x1=np.cos(np.deg2rad(23))
y1=np.sin(np.deg2rad(23))
x2=np.cos(np.deg2rad(37))
y2=np.sin(np.deg2rad(37))
b=np.array([[30*complex(x1,y1)],[52*complex(x2,y2)]])
np.linalg.solve(A,b)

import matplotlib.pyplot as plt   # Questao13/20 curvas de nivel z=2x2+y3
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
x=np.linspace(-10,10,150)
y=np.linspace(-10,10,150)
X,Y=np.meshgrid(x,y)
Z=-2*X**2+Y**3
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.contour3D(X,Y,Z,15)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
x=np.linspace(-10,10,150)
y=np.linspace(-10,10,150)
X,Y=np.meshgrid(x,y)
Z=-2*X**2+Y**3
fig=plt.figure()
ax=plt.axes(projection='3d')
ax.plot_surface(X,Y,Z)

from sympy import * #Integral da função questao pratica
x,f=symbols("x f")
f=x**3+cos(x)
integrate(f, (x, 0, 2))

vp=144010.00   # Juros compostos questão pratica
n=14
i=1.3/100
vf=vp*(1+i)**n
print(vf)

vs=137236.64       # salario 12 - encargos 68,18% Questao pratica
func=12
enc=168.18/100
t=vs/enc
to=t/12
print(to)

import numpy as np    # RAIZES DE UMA FUNÇÃO
coeficientes=[-2, 7, -20, 6]
np.roots(coeficientes)

c=10000.00 #Capital (valor presente)
m=14000.00 #Montante (valor futuro)
n=1 #tempo, em meses 1 ano no caso
taxa=(m-c)/n/c #Aplicação da fórmula para o cálculo da taxa
round(taxa*100,2)

"""# Pratica Q"""

from sympy import * # Qual e o nivel de produção que minimiza
x,c = symbols("x c")
c=2*x**2-40*x+1000
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x, p[0])
print('Produção ótima: ',p[0])
print('Derivada segunda: ',ds)

from scipy.interpolate import *
x=[0, 20, 40]
y=[0, 20, 0]
f=lagrange(x,y)
print(f)

from sympy import * # Qual e o nivel de produção que minimiza
x,c = symbols("x c")
c=-0.008*x**2+0.8*x
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x, p[0])
print('Produção ótima: ',p[0])
print('Derivada segunda: ',ds)



64.700/8

from sympy import *
x,f=symbols("x f")
f=(x**4/4)+(sin(x))
integrate(f, (x, 1, 2)))

from sympy import *
x,f=symbols("x f")
f=x**3+cos(x)
integrate(f, x)

from sympy import *
x,f=symbols("x f")
init_printing()
f=6*x**5+cos(x)
integrate(f, x)

from sympy import *
x,q,f=symbols("x q f")
f=x**3+cos(x)
integrate(f, (x, 0, 2))

from sympy import *
x,f = symbols("x f")
f=4*x**3+12*x-7
df=diff(f, x, 2)
p=solve(Eq(df,0))
print(p)

from sympy import *
x,f = symbols("x c")
f=1340*x-0.08*x**2
df=diff(f, x)
p=solve(Eq(df,0))
print('Produção ótima: ',p[0])

from sympy import *
x,c = symbols("x c")
c=18*x**4-14*x**2+22*x-1
df=diff(c, x)
p=solve(Eq(df,0))
print('Produção ótima: ',p[0])

factor(-7/(18*(-1/2 - sqrt(3)*I/2)*(sqrt(79977)/72 + 33/8)**(1/3)) - (-1/2 - sqrt(3)*I/2)*(sqrt(79977)/72 + 33/8)**(1/3)/3)

from sympy import *
x,y = symbols("x y")
y=18*x**4-14*x**2+22*x-1
df=diff(y, x)
d2f=diff(y, x, 2)
p=solve(Eq(df,0))
l=y.subs(x, p[0])
ds=d2f.subs(x, p[0])
print('Preço ótimo: ',p[0])
print('Lucro máximo: ',l)
print('Derivada segunda: ',ds)

import numpy as np        # APOL2
from scipy import stats
x=np.array([3,6])
y=np.array([2000,3000])
a,b,correlacao,p,erro=stats.linregress(x,y)
print('A equação é: y=%.2fx+%.2f'% (a,b))
previsao=a*7+b                                        #previsao para setimo mes
print('Demanda prevista para o setimo mes: R$ %.2f'% previsao)



dolar=4.06
aparelho=748
valor=aparelho*dolar
print(valor)

from sympy import *
c, x = symbols("c x")
c=4*x**3+12*x-7
df=diff(c, x)
d2f=diff(c, x, 2)
p=solve(Eq(df,0))
ds=d2f.subs(x,p[0])
print('Produção ótima:',p[0])
print('Derivada segunda:',ds)

from sympy import *   #questao pratica 
x,r,c = symbols('x r c')
r=193.57*x
c=129*x+18322.8
p=solve(Eq(r,c),x)
print(p)
r.subs(x,p[0])

from sympy import *     #Questao 10/20 lucro maximo
x,y = symbols("x y")
y=-2*x**2+7000*x-12000
df=diff(y, x)
d2f=diff(y, x, 2)
p=solve(Eq(df,0))
l=y.subs(x, p[0])
ds=d2f.subs(x, p[0])
print('Preço ótimo: ',p[0])
print('Lucro máximo: ',l)
print('Derivada segunda: ',ds)

from sympy import *
x,f=symbols("x f")
f=4*x**3+12*x-7
integrate(f, x)

c=6500.00
n=6
montante=(c*(1.9)**n)/100/100
print('O montante é %.2f%%' % montante)

6500*3.58

c=6500.00 #Capital (valor presente)
m=6858.99 #Montante (valor futuro)
n=6 #tempo, em meses
taxa=(m-c)/n/c
print(taxa*100) #Apresentação da taxa

c=6500.00 #Capital (valor presente)
m=6514.45 #Montante (valor futuro)
n=6 #tempo, em meses
taxa=(m-c)/n/c
print(taxa*100) #Apresentação da taxa

c=6500.00 #Capital (valor presente)
m=6768.56 #Montante (valor futuro)
n=6 #tempo, em meses
taxa=(m-c)/n/c
print(taxa*100) #Apresentação da taxa

c=6500.00 #Capital (valor presente)
m=6786.15 #Montante (valor futuro)
n=6 #tempo, em meses
taxa=(m-c)/n/c
print(taxa*100) #Apresentação da taxa

import numpy as np        # APOL2
from scipy import stats
x=np.array([3,4,7,10])
y=np.array([6,4,11,12])
a,b,correlacao,p,erro=stats.linregress(x,y)
print('A equação é: y=%.2fx+%.2f'% (a,b))

import numpy as np
A=np.array([[5, 1, 3],[-1, 2, 5],[4, -5, 1]])
b=np.array([[76],[35],[22]])
X=np.linalg.solve(A,b)
print(X)
A

import numpy as np            # Questao pratica pontos A(3,6)B()C()D()
import matplotlib.pyplot as plt
from scipy.interpolate import *
x=[3,4,7,10]
y=[6,4,11,12]
f=lagrange(x,y)
print(f)

import numpy as np
v=np.array([[3, -2, 1]])
u=np.array([[6, 5, -7]])
w=np.cross(u,v)
print(w)

import numpy as np
v=np.array([[7, 1, -9]])
u=np.array([[3, -5, -4]])
w=np.cross(u,v)
print(w)

from sympy import *
x,y = symbols("x y")
init_printing()
expand((12*x**5-3*x**4+4*x**2)**2)

import numpy as np
A=np.array([[complex(8,4), complex(-3,-4)],[complex(-3,-4), complex(8,-1)]])
x1=np.cos(np.deg2rad(0))
y1=np.sin(np.deg2rad(0))
x2=np.cos(np.deg2rad(-150))
y2=np.sin(np.deg2rad(-150))
b=np.array([[100*complex(x1,y1)],[50*complex(x2,y2)]])
np.linalg.solve(A,b)

import numpy as np          # Questao - Resolva o sistema 52< 37°
A=np.array([[complex(1,5), complex(3,-2)],[complex(3,-2), complex(4,1)]])
x1=np.cos(np.deg2rad(23))
y1=np.sin(np.deg2rad(23))
x2=np.cos(np.deg2rad(37))
y2=np.sin(np.deg2rad(37))
b=np.array([[30*complex(x1,y1)],[52*complex(x2,y2)]])
np.linalg.solve(A,b)

"""# Ao Vivo"""

1. Uma determinada mercadoria custa R$ 458,00 e foi anunciada com desconto de 70% fazendo com que, nesta
promoção, ela seja vendida pelo preço de custo. Considerando o preço de custo, qual é a porcentagem de aumento
para que a mercadoria volte a custar R$ 458,00?

Desconto=458*70/100
PrecoDeCusto=458-Desconto
PorcentagemDeAumento=Desconto/PrecoDeCusto*100
print('Desconto: R$ %.2f' % Desconto)
print('Preço de custo: R$ %.2f' % PrecoDeCusto)
print('Porcentagem de aumento: %.2f%%' % PorcentagemDeAumento)

2. Quando um boleto é pago com atraso em um período inferior a 30 dias, é muito comum que seja cobrado um valor
fixo a cada dia de atraso, referente ao respectivo juro. Como o juro é definido a partir do valor do boleto e proporcional
aos dias de atraso, é chamado de juro simples e calculado por meio da fórmula M=C(1+i.n) onde M é o valor futuro,
ou seja, o valor do boleto acrescido de juros, C é o capital e corresponde ao valor inicial do boleto, i é a taxa de juros
e n é o tempo referente ao atraso.

Se o tempo de atraso for superior a 30 dias, a cada mês o juro é calculado não mais sobre o valor inicial da dívida, mas
sim pelo valor atualizado, ou seja, calculado sobre o valor inicial mais os juros do período. Quando a cobrança de juro
é feita sobre este valor atualizado, a modalidade é conhecida como juros compostos e a fórmula para o cálculo do
montante é M=C(1+i)n

import matplotlib.pyplot as plt
import numpy as np
C=1000
i=10/100
n=np.linspace(0,12,100)
js=C*(1+i*n)
jc=C*(1+i)**n
plt.plot(n,js, label='Juros Simples')
plt.plot(n,jc, label='Juros Compostos')
plt.legend()
plt.show()

"""3. `Um boleto bancário no valor de R$ 2.237,12 foi pago com 14 dias de atraso. Há uma multa de R$ 45,00 e a cada dia de atraso deverá ser feito um acréscimo de 0,03% sobre o valor do boleto. Com base nestas informações, determine o total a ser pago em decorrência do atraso.
Sendo assim, faça a representação gráfica, em um mesmo sistema de eixos, dos juros simples e dos juros compostos
referentes a um período de 12 meses. Para a representação, considere um capital de R$ 1.000,00 e uma taxa de juros
de 10% ao mês. Adicione a respectiva legenda.`
"""

c=566.00
m=614.30
n=6
taxa=((m-c)/n/c)*100
M=C(1+i)n
print('A taxa é %.2f%%' % taxa)

"""4. Uma fatura de cartão de crédito foi paga com 3 meses de atraso. Se o valor original da fatura é R$ 1.326,66 e os encargos/juros, na modalidade composta, correspondem a 19,99% ao mês, determine o total pago pela fatura




"""

C=1326.66
n=3
i=19.99/100
M=C*(1+i)**n
print('Total a ser pago: R$ %.2f' % M)





3. Um boleto bancário no valor de R$ 2.237,12 foi pago com 14 dias de atraso. Há uma multa de R$ 45,00 e a cada dia
de atraso deverá ser feito um acréscimo de 0,03% sobre o valor do boleto. Com base nestas informações, determine
o total a ser pago em decorrência do atraso.





4. Uma fatura de cartão de crédito foi paga com 3 meses de atraso. Se o valor original da fatura é R$ 1.326,66 e os
encargos/juros, na modalidade composta, correspondem a 19,99% ao mês, determine o total pago pela fatura.





5. Quando utilizamos juros compostos, é muito comum surgir a necessidade de convertermos taxas mensais em taxas
anuais ou taxas anuais em taxas mensais. A fórmula utilizada, uma adaptação da fórmula para o cálculo do montante,
para que possamos realizar a conversão é:

onde iq é a taxa que queremos, ou seja, a taxa que estamos procurando. O termo it corresponde à taxa que temos, tq
o tempo que queremos e tt corresponde ao tempo que temos. Com base nestas informações, qual é a taxa anual
equivalente a uma taxa composta de 19,99% ao mês.





6. Quando precisamos calcular o valor de uma série de pagamentos periódicos e iguais onde a primeira parcela é paga
no final do período e a modalidade de juros compostos é utilizada, temos a fórmula

onde C é o capital, P é o valor de cada parcela, n corresponde ao número de parcelas e i é a taxa de juros. A partir das
informações acima, calcule o valor das parcelas referentes à compra de uma cozinha planejada no valor de R$
18.500,00 parcelado em 36 vezes, a uma taxa de juros de 2% ao mês, com primeiro pagamento para 30 dias





7. Qual é o valor futuro referente a uma série de 240 depósitos mensais iguais, no valor de R$ 500,00 cada, a uma taxa
de juros compostos de 0,2% ao mês, calculado 30 dias após a data do último depósito? O total é obtido por meio da
fórmula



